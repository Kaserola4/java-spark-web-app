<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Offers for {{item.name}}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: #0a0a0a;
            min-height: 100vh;
            padding: 2rem;
            margin-bottom: 140px;
            color: #e0e0e0;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: linear-gradient(145deg, #1a1a1a, #0f0f0f);
            border-radius: 16px;
            border: 1px solid #2a2a2a;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);
            padding: 3rem;
            position: relative;
            overflow: hidden;
        }

        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, #666, transparent);
        }

        h1 {
            color: #ffffff;
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
            letter-spacing: -0.5px;
        }

        .item-details {
            background: linear-gradient(135deg, #1f1f1f 0%, #2a2a2a 100%);
            padding: 1.5rem;
            border-radius: 12px;
            margin: 2rem 0;
            border: 1px solid #333;
            position: relative;
            overflow: hidden;
        }

        .item-details::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(180deg, #888, #555);
        }

        .item-details p {
            color: #b0b0b0;
            margin: 0.8rem 0;
            font-size: 1rem;
            padding-left: 1rem;
        }

        .item-details strong {
            color: #fff;
            font-weight: 500;
            margin-right: 0.5rem;
        }

        .table-wrapper {
            overflow-x: auto;
            border-radius: 12px;
            border: 1px solid #2a2a2a;
            background: #0f0f0f;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        th, td {
            padding: 1.2rem 1.5rem;
            text-align: left;
        }

        th {
            background: linear-gradient(180deg, #2a2a2a 0%, #1f1f1f 100%);
            color: #ffffff;
            cursor: pointer;
            font-weight: 500;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 1.5px;
            border-bottom: 1px solid #333;
            transition: all 0.2s ease;
            position: relative;
        }

        th::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, transparent, #666, transparent);
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        th:hover {
            background: linear-gradient(180deg, #333 0%, #2a2a2a 100%);
        }

        th:hover::after {
            opacity: 1;
        }

        tbody tr {
            border-bottom: 1px solid #1a1a1a;
            transition: all 0.2s ease;
        }

        tbody tr:hover {
            background: linear-gradient(90deg, #1a1a1a, #1f1f1f);
            border-left: 2px solid #666;
        }

        tbody tr:last-child {
            border-bottom: none;
        }

        td {
            color: #b0b0b0;
            font-size: 0.95rem;
        }

        .status {
            font-weight: 500;
            text-transform: uppercase;
            padding: 0.4rem 1rem;
            border-radius: 6px;
            display: inline-block;
            font-size: 0.75rem;
            letter-spacing: 1px;
            background: linear-gradient(135deg, #2a2a2a, #1f1f1f);
            color: #888;
            border: 1px solid #333;
        }

        .actions-cell {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .action-btn {
            padding: 0.4rem 0.8rem;
            font-size: 0.7rem;
            border-radius: 4px;
            border: 1px solid #2a2a2a;
            background: linear-gradient(135deg, #2a2a2a 0%, #1f1f1f 100%);
            color: #b0b0b0;
            cursor: pointer;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.2s ease;
        }

        .action-btn:hover {
            border-color: #666;
            color: #fff;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(102, 102, 102, 0.2);
        }

        .action-btn:active {
            transform: translateY(0);
        }

        .action-btn.delete {
            border-color: #5a1f1f;
            background: linear-gradient(135deg, #3a1515, #2a1010);
            color: #ff6b6b;
        }

        .action-btn.delete:hover {
            border-color: #ff6b6b;
            box-shadow: 0 2px 8px rgba(255, 107, 107, 0.3);
        }

        .action-btn.accept {
            border-color: #1f5a3a;
            background: linear-gradient(135deg, #153a25, #102a1a);
            color: #6bff9b;
        }

        .action-btn.accept:hover {
            border-color: #6bff9b;
            box-shadow: 0 2px 8px rgba(107, 255, 155, 0.3);
        }

        /* Sticky offer form */
        #new-offer-form {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background: linear-gradient(180deg, #1a1a1a 0%, #0f0f0f 100%);
            border-top: 1px solid #2a2a2a;
            box-shadow: 0 -10px 40px rgba(0, 0, 0, 0.8);
            padding: 1.5rem;
            display: flex;
            gap: 1rem;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
        }

        #new-offer-form::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, #666, transparent);
        }

        #new-offer-form input, #new-offer-form button {
            padding: 0.9rem 1.5rem;
            font-size: 0.95rem;
            border-radius: 8px;
            border: 1px solid #2a2a2a;
            transition: all 0.3s ease;
            font-family: inherit;
        }

        #new-offer-form input {
            background: linear-gradient(145deg, #1a1a1a, #0f0f0f);
            color: #ffffff;
            min-width: 200px;
        }

        #new-offer-form input:focus {
            outline: none;
            border-color: #555;
            box-shadow: 0 0 0 3px rgba(85, 85, 85, 0.2);
            background: #1f1f1f;
        }

        #new-offer-form input::placeholder {
            color: #555;
        }

        #new-offer-form button {
            background: linear-gradient(135deg, #2a2a2a 0%, #1f1f1f 100%);
            color: #ffffff;
            cursor: pointer;
            border: 1px solid #444;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 1px;
            padding: 0.9rem 2.5rem;
            position: relative;
            overflow: hidden;
        }

        #new-offer-form button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            transition: left 0.5s ease;
        }

        #new-offer-form button:hover {
            border-color: #666;
            box-shadow: 0 4px 20px rgba(102, 102, 102, 0.3);
        }

        #new-offer-form button:hover::before {
            left: 100%;
        }

        #new-offer-form button:active {
            transform: translateY(1px);
        }

        /* Empty state */
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #555;
            font-size: 1rem;
        }

        /* Responsive */
        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            .container {
                padding: 1.5rem;
            }

            h1 {
                font-size: 2rem;
            }

            #new-offer-form {
                flex-direction: column;
                padding: 1rem;
            }

            #new-offer-form input {
                width: 100%;
                min-width: auto;
            }

            #new-offer-form button {
                width: 100%;
            }

            th, td {
                padding: 0.8rem 1rem;
                font-size: 0.85rem;
            }
        }

        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #0f0f0f;
        }

        ::-webkit-scrollbar-thumb {
            background: #333;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #444;
        }
    </style>
</head>
<body>
<div class="container">
    <h1>Offers for {{item.name}}</h1>

    <div class="item-details">
        <p><strong>Description:</strong> {{item.description}}</p>
        <p><strong>Base price:</strong> ${{item.price}}</p>
    </div>

    <div class="table-wrapper">
        <table id="offersTable">
            <thead>
            <tr>
                <th>ID</th>
                <th>User</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Created At</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody id="offersBody">
            {{#offers}}
                <tr data-offer-id="{{id}}">
                    <td>{{id}}</td>
                    <td>{{userName}}</td>
                    <td>${{amount}}</td>
                    <td><span class="status">{{status}}</span></td>
                    <td>{{createdAt}}</td>
                    <td class="actions-cell">
                        <button class="action-btn accept" onclick="updateOfferStatus({{id}}, 'accept')">Accept</button>
                        <button class="action-btn" onclick="updateOfferStatus({{id}}, 'reject')">Reject</button>
                        <button class="action-btn" onclick="updateOfferStatus({{id}}, 'cancel')">Cancel</button>
                        <button class="action-btn" onclick="updateOfferStatus({{id}}, 'complete')">Complete</button>
                        <button class="action-btn delete" onclick="deleteOffer({{id}})">Delete</button>
                    </td>
                </tr>
            {{/offers}}
            {{^offers}}
                <tr><td colspan="6" class="empty-state">No offers yet</td></tr>
            {{/offers}}
            </tbody>
        </table>
    </div>
</div>

<!-- Sticky form -->
<form id="new-offer-form">
    <input type="number" name="userId" placeholder="User ID" min="1" required />
    <input type="number" name="amount" placeholder="Offer amount" min="1" required />
    <button type="submit">Create Offer</button>
</form>

<script>
    const itemId = "{{item.id}}";
    const tableBody = document.getElementById("offersBody");

    const ws = new WebSocket(`ws://${window.location.host}/ws/offers?itemId=${itemId}`);
    ws.onopen = () => console.log("✅ Connected to offers WebSocket for item", itemId);
    ws.onclose = () => console.log("🔴 Disconnected from offers WebSocket");
    ws.onerror = (err) => console.error("WebSocket error:", err);

    ws.onmessage = (msg) => {
        let parsed;
        try {
            parsed = JSON.parse(msg.data);
        } catch (e) {
            console.error("Invalid WS data", msg.data);
            return;
        }

        const { eventType, data } = parsed;
        const offer = typeof data === "string" ? JSON.parse(data) : data;
        console.log("📩 Offer event received:", eventType, offer);

        switch (eventType) {
            case "OFFER_CREATED":
            case "OFFER_UPDATED":
            case "OFFER_REBID":
                upsertOfferRow(offer);
                break;
            case "OFFER_DELETED":
                removeOfferRow(offer.id);
                break;
            case "OFFER_REJECTED":
            case "OFFER_CANCELLED":
            case "OFFER_COMPLETED":
            case "OFFER_ACCEPTED":
                updateOfferStatus(offer);
                break;
        }
    };

    function updateOfferStatus(offer) {
        const row = document.querySelector(`tr[data-offer-id='${offer.id}']`);
        if (!row) return;
        row.querySelector(".status").textContent = offer.status;
    }

    function upsertOfferRow(offer) {
        let row = document.querySelector(`tr[data-offer-id='${offer.id}']`);
        if (!row) {
            row = document.createElement("tr");
            row.dataset.offerId = offer.id;
            row.innerHTML = `
                <td>${offer.id}</td>
                <td>${offer.userName}</td>
                <td>${offer.amount}</td>
                <td><span class="status">${offer.status}</span></td>
                <td>${offer.createdAt}</td>
                <td class="actions-cell">
                    <button class="action-btn accept" onclick="updateOfferStatusAction(${offer.id}, 'accept')">Accept</button>
                    <button class="action-btn" onclick="updateOfferStatusAction(${offer.id}, 'reject')">Reject</button>
                    <button class="action-btn" onclick="updateOfferStatusAction(${offer.id}, 'cancel')">Cancel</button>
                    <button class="action-btn" onclick="updateOfferStatusAction(${offer.id}, 'complete')">Complete</button>
                    <button class="action-btn delete" onclick="deleteOffer(${offer.id})">Delete</button>
                </td>
            `;
            tableBody.appendChild(row);
        } else {
            row.querySelector("td:nth-child(2)").textContent = offer.userName;
            row.querySelector("td:nth-child(3)").textContent = `${offer.amount}`;
            row.querySelector(".status").textContent = offer.status;
            row.querySelector("td:nth-child(5)").textContent = offer.createdAt;
        }
    }

    function removeOfferRow(id) {
        const row = document.querySelector(`tr[data-offer-id='${id}']`);
        if (row) row.remove();
    }

    // Actions
    async function updateOfferStatusAction(offerId, status) {
        try {
            const res = await fetch(`/api/v1/offers/${offerId}/${status}`, {
                method: "PUT"
            });

            if (!res.ok) throw new Error(await res.text());
            console.log(`✅ Offer ${offerId} status updated to ${status}`);
        } catch (err) {
            console.error(`❌ Error updating offer status:`, err);
            alert(`Failed to update offer status. Check console for details.`);
        }
    }

    async function deleteOffer(offerId) {
        if (!confirm(`Are you sure you want to delete offer #${offerId}?`)) return;

        try {
            const res = await fetch(`/api/v1/offers/${offerId}`, {
                method: "DELETE"
            });

            if (!res.ok) throw new Error(await res.text());
            console.log(`✅ Offer ${offerId} deleted`);
        } catch (err) {
            console.error(`❌ Error deleting offer:`, err);
            alert(`Failed to delete offer. Check console for details.`);
        }
    }

    // ---- Table sorting logic ----
    const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;

    const comparer = (idx, asc) => (a, b) =>
            ((v1, v2) =>
                            v1 !== "" && v2 !== "" && !isNaN(v1) && !isNaN(v2)
                                    ? v1 - v2
                                    : v1.toString().localeCompare(v2)
            )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

    document.querySelectorAll("th").forEach((th, idx) =>
            th.addEventListener("click", () => {
                const table = th.closest("table");
                Array.from(table.querySelectorAll("tbody tr"))
                        .sort(comparer(idx, (this.asc = !this.asc)))
                        .forEach(tr => table.querySelector("tbody").appendChild(tr));
            })
    );

    // ---- Sticky form ----
    document.getElementById("new-offer-form").addEventListener("submit", async (e) => {
        e.preventDefault();
        const form = e.target;
        const userId = form.userId.value;
        const finalPrice = form.amount.value;

        const payload = {
            userId: Number(userId),
            itemId: Number(itemId),
            finalPrice: Number(finalPrice)
        };

        try {
            const res = await fetch("/api/v1/offers", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });

            if (!res.ok) throw new Error(await res.text());
            form.reset();
            console.log("✅ Offer created successfully");
        } catch (err) {
            console.error("❌ Error creating offer:", err);
            alert("Failed to create offer. Check console for details.");
        }
    });
</script>

</body>
</html>