<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Offers for {{item.name}}</title>
    <link rel="stylesheet" href="/static/styles.css" />
    <script defer src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>
    <style>
        body { font-family: sans-serif; padding: 2rem; margin-bottom: 120px; }
        table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
        th, td { border: 1px solid #ccc; padding: 0.5rem; text-align: left; }
        th { background-color: #f4f4f4; cursor: pointer; }
        tr:hover { background-color: #f9f9f9; }
        .status { font-weight: bold; text-transform: capitalize; }

        /* Sticky offer form */
        #new-offer-form {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background: #fff;
            border-top: 1px solid #ccc;
            box-shadow: 0 -2px 4px rgba(0,0,0,0.1);
            padding: 1rem;
            display: flex;
            gap: 0.5rem;
            align-items: center;
            justify-content: center;
        }

        #new-offer-form input, #new-offer-form button {
            padding: 0.5rem;
            font-size: 1rem;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

        #new-offer-form button {
            background: #007bff;
            color: white;
            cursor: pointer;
            border: none;
        }

        #new-offer-form button:hover {
            background: #0056b3;
        }
    </style>
</head>
<body>
<h1>Offers for {{item.name}}</h1>
<p><strong>Description:</strong> {{item.description}}</p>
<p><strong>Base price:</strong> ${{item.price}}</p>

<table id="offersTable">
    <thead>
    <tr>
        <th>ID</th>
        <th>User</th>
        <th>Amount</th>
        <th>Status</th>
        <th>Created At</th>
    </tr>
    </thead>
    <tbody id="offersBody">
    {{#offers}}
        <tr data-offer-id="{{id}}">
            <td>{{id}}</td>
            <td>{{userName}}</td>
            <td>${{amount}}</td>
            <td class="status">{{status}}</td>
            <td>{{createdAt}}</td>
        </tr>
    {{/offers}}
    {{^offers}}
        <tr><td colspan="5" style="text-align:center;">No offers yet.</td></tr>
    {{/offers}}
    </tbody>
</table>

<!-- Sticky form -->
<form id="new-offer-form">
    <input type="number" name="userId" placeholder="User ID" min="1" required />
    <input type="number" name="amount" placeholder="Offer amount" min="1" required />
    <button type="submit">Create Offer</button>
</form>

<script>
    const itemId = "{{item.id}}";
    const tableBody = document.getElementById("offersBody");

    const ws = new WebSocket(`ws://${window.location.host}/ws/offers?itemId=${itemId}`);
    ws.onopen = () => console.log("‚úÖ Connected to offers WebSocket for item", itemId);
    ws.onclose = () => console.log("üî¥ Disconnected from offers WebSocket");
    ws.onerror = (err) => console.error("WebSocket error:", err);

    ws.onmessage = (msg) => {
        let parsed;
        try {
            parsed = JSON.parse(msg.data);
        } catch (e) {
            console.error("Invalid WS data", msg.data);
            return;
        }

        const { eventType, data } = parsed;
        const offer = typeof data === "string" ? JSON.parse(data) : data;
        console.log("üì© Offer event received:", eventType, offer);

        switch (eventType) {
            case "OFFER_CREATED":
            case "OFFER_UPDATED":
            case "OFFER_REBID":
                upsertOfferRow(offer);
                break;
            case "OFFER_DELETED":
                removeOfferRow(offer.id);
                break;
            case "OFFER_REJECTED":
            case "OFFER_CANCELLED":
            case "OFFER_COMPLETED":
            case "OFFER_ACCEPTED":
                updateOfferStatus(offer);
                break;
        }
    };

    function updateOfferStatus(offer) {
        const row = document.querySelector(`tr[data-offer-id='${offer.id}']`);
        if (!row) return;
        row.querySelector(".status").textContent = offer.status;
    }

    function upsertOfferRow(offer) {
        let row = document.querySelector(`tr[data-offer-id='${offer.id}']`);
        if (!row) {
            row = document.createElement("tr");
            row.dataset.offerId = offer.id;
            row.innerHTML = `
                <td>${offer.id}</td>
                <td>${offer.userName}</td>
                <td>$${offer.amount}</td>
                <td class="status">${offer.status}</td>
                <td>${offer.createdAt}</td>
            `;
            tableBody.appendChild(row);
        } else {
            row.querySelector("td:nth-child(2)").textContent = offer.userName;
            row.querySelector("td:nth-child(3)").textContent = `$${offer.amount}`;
            row.querySelector(".status").textContent = offer.status;
            row.querySelector("td:nth-child(5)").textContent = offer.createdAt;
        }
    }

    function removeOfferRow(id) {
        const row = document.querySelector(`tr[data-offer-id='${id}']`);
        if (row) row.remove();
    }

    // ---- Table sorting logic ----
    const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;

    const comparer = (idx, asc) => (a, b) =>
            ((v1, v2) =>
                            v1 !== "" && v2 !== "" && !isNaN(v1) && !isNaN(v2)
                                    ? v1 - v2
                                    : v1.toString().localeCompare(v2)
            )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

    document.querySelectorAll("th").forEach((th, idx) =>
            th.addEventListener("click", () => {
                const table = th.closest("table");
                Array.from(table.querySelectorAll("tbody tr"))
                        .sort(comparer(idx, (this.asc = !this.asc)))
                        .forEach(tr => table.querySelector("tbody").appendChild(tr));
            })
    );

    // ---- Sticky form ----
    document.getElementById("new-offer-form").addEventListener("submit", async (e) => {
        e.preventDefault();
        const form = e.target;
        const userId = form.userId.value;
        const finalPrice = form.amount.value;

        const payload = {
            userId: Number(userId),
            itemId: Number(itemId),
            finalPrice: Number(finalPrice)
        };

        try {
            const res = await fetch("/api/v1/offers", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });

            if (!res.ok) throw new Error(await res.text());
            form.reset();
            console.log("‚úÖ Offer created successfully");
        } catch (err) {
            console.error("‚ùå Error creating offer:", err);
            alert("Failed to create offer. Check console for details.");
        }
    });
</script>

</body>
</html>
