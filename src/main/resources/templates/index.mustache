<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Java Spark Auctions</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css"
          integrity="sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls"
          crossorigin="anonymous">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: #0a0a0a;
            min-height: 100vh;
            padding: 2rem;
            color: #e0e0e0;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: linear-gradient(145deg, #1a1a1a, #0f0f0f);
            border-radius: 16px;
            border: 1px solid #2a2a2a;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);
            padding: 3rem;
            position: relative;
            overflow: hidden;
        }

        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, #666, transparent);
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 3rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid #2a2a2a;
            position: relative;
        }

        header::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, #444, transparent);
        }

        h1 {
            color: #ffffff;
            font-size: 2.5rem;
            font-weight: 600;
            letter-spacing: -0.5px;
        }

        #status {
            font-size: 0.85rem;
            color: #888;
            padding: 0.5rem 1.2rem;
            background: linear-gradient(135deg, #1f1f1f, #2a2a2a);
            border: 1px solid #333;
            border-radius: 20px;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 500;
        }

        #status.connected {
            color: #6ee7b7;
            border-color: #065f46;
            background: linear-gradient(135deg, #064e3b, #065f46);
        }

        .filters {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            align-items: center;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .filter-group label {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: #888;
            font-weight: 500;
        }

        .filter-input {
            padding: 0.7rem 1rem;
            font-size: 0.9rem;
            border-radius: 6px;
            border: 1px solid #2a2a2a;
            background: linear-gradient(145deg, #1a1a1a, #0f0f0f);
            color: #ffffff;
            font-family: inherit;
            transition: all 0.3s ease;
            min-width: 200px;
        }

        .filter-input:focus {
            outline: none;
            border-color: #555;
            box-shadow: 0 0 0 3px rgba(85, 85, 85, 0.2);
            background: #1f1f1f;
        }

        .filter-input::placeholder {
            color: #555;
        }

        .filter-btn {
            padding: 0.7rem 1.5rem;
            font-size: 0.85rem;
            border-radius: 6px;
            border: 1px solid #2a2a2a;
            background: linear-gradient(135deg, #2a2a2a 0%, #1f1f1f 100%);
            color: #ffffff;
            cursor: pointer;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            align-self: flex-end;
        }

        .filter-btn:hover {
            border-color: #666;
            box-shadow: 0 4px 15px rgba(102, 102, 102, 0.2);
            transform: translateY(-1px);
        }

        .filter-btn:active {
            transform: translateY(0);
        }

        .results-info {
            color: #888;
            font-size: 0.85rem;
            margin-bottom: 1rem;
            padding: 0.5rem 0;
        }

        .results-info span {
            color: #fff;
            font-weight: 500;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .create-btn {
            padding: 0.8rem 2rem;
            font-size: 0.9rem;
            border-radius: 6px;
            border: 1px solid #444;
            background: linear-gradient(135deg, #2a2a2a 0%, #1f1f1f 100%);
            color: #ffffff;
            cursor: pointer;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .create-btn:hover {
            border-color: #666;
            box-shadow: 0 4px 15px rgba(102, 102, 102, 0.2);
            transform: translateY(-1px);
        }

        .item-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn-small {
            padding: 0.4rem 0.8rem;
            font-size: 0.7rem;
            border-radius: 4px;
            border: 1px solid #2a2a2a;
            background: linear-gradient(135deg, #2a2a2a 0%, #1f1f1f 100%);
            color: #b0b0b0;
            cursor: pointer;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.2s ease;
        }

        .action-btn-small:hover {
            border-color: #666;
            color: #fff;
            transform: translateY(-1px);
        }

        .action-btn-small.edit {
            border-color: #3a4a5a;
            background: linear-gradient(135deg, #2a3a4a, #1f2f3f);
            color: #6b9fff;
        }

        .action-btn-small.edit:hover {
            border-color: #6b9fff;
        }

        .action-btn-small.delete {
            border-color: #5a1f1f;
            background: linear-gradient(135deg, #3a1515, #2a1010);
            color: #ff6b6b;
        }

        .action-btn-small.delete:hover {
            border-color: #ff6b6b;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(4px);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: linear-gradient(145deg, #1a1a1a, #0f0f0f);
            border: 1px solid #2a2a2a;
            border-radius: 12px;
            padding: 2rem;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);
        }

        .modal-header {
            margin-bottom: 1.5rem;
        }

        .modal-header h2 {
            color: #ffffff;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: #888;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .form-input {
            width: 100%;
            padding: 0.8rem 1rem;
            font-size: 0.95rem;
            border-radius: 6px;
            border: 1px solid #2a2a2a;
            background: linear-gradient(145deg, #1a1a1a, #0f0f0f);
            color: #ffffff;
            font-family: inherit;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #555;
            box-shadow: 0 0 0 3px rgba(85, 85, 85, 0.2);
            background: #1f1f1f;
        }

        .form-input::placeholder {
            color: #555;
        }

        textarea.form-input {
            resize: vertical;
            min-height: 100px;
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }

        .modal-btn {
            padding: 0.7rem 1.5rem;
            font-size: 0.85rem;
            border-radius: 6px;
            border: 1px solid #2a2a2a;
            background: linear-gradient(135deg, #2a2a2a 0%, #1f1f1f 100%);
            color: #ffffff;
            cursor: pointer;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .modal-btn:hover {
            border-color: #666;
            transform: translateY(-1px);
        }

        .modal-btn.primary {
            border-color: #444;
        }

        .modal-btn.cancel {
            background: transparent;
            border-color: #333;
            color: #888;
        }

        .table-wrapper {
            overflow-x: auto;
            border-radius: 12px;
            border: 1px solid #2a2a2a;
            background: #0f0f0f;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        th, td {
            padding: 1.2rem 1.5rem;
            text-align: left;
            border-bottom: 1px solid #1a1a1a;
        }

        th {
            background: linear-gradient(180deg, #2a2a2a 0%, #1f1f1f 100%);
            color: #ffffff;
            cursor: pointer;
            user-select: none;
            font-weight: 500;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 1.5px;
            transition: all 0.2s ease;
            position: relative;
        }

        th::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, transparent, #666, transparent);
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        th:hover {
            background: linear-gradient(180deg, #333 0%, #2a2a2a 100%);
        }

        th:hover::after {
            opacity: 1;
        }

        tbody tr {
            transition: all 0.2s ease;
        }

        tbody tr:hover {
            background: linear-gradient(90deg, #1a1a1a, #1f1f1f);
            border-left: 2px solid #666;
        }

        tbody tr:last-child td {
            border-bottom: none;
        }

        td {
            color: #b0b0b0;
            font-size: 0.95rem;
        }

        .no-items {
            text-align: center;
            color: #555;
            padding: 3rem;
            font-size: 1rem;
        }

        .pure-button {
            padding: 0.6rem 1.5rem;
            font-size: 0.85rem;
            border-radius: 6px;
            border: 1px solid #2a2a2a;
            background: linear-gradient(135deg, #2a2a2a 0%, #1f1f1f 100%);
            color: #ffffff;
            cursor: pointer;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .pure-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            transition: left 0.5s ease;
        }

        .pure-button-primary {
            border-color: #444;
        }

        .pure-button:hover {
            border-color: #666;
            box-shadow: 0 4px 15px rgba(102, 102, 102, 0.2);
            transform: translateY(-1px);
        }

        .pure-button:hover::before {
            left: 100%;
        }

        .pure-button:active {
            transform: translateY(0);
        }

        .sort-arrow {
            margin-left: 6px;
            font-size: 0.7rem;
            opacity: 0.7;
            color: #888;
        }

        /* Responsive */
        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            .container {
                padding: 1.5rem;
            }

            h1 {
                font-size: 2rem;
            }

            header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }

            th, td {
                padding: 0.8rem 1rem;
                font-size: 0.85rem;
            }
        }

        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #0f0f0f;
        }

        ::-webkit-scrollbar-thumb {
            background: #333;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #444;
        }
    </style>
</head>
<body>
<div class="container">
    <header>
        <h1>Available Items</h1>
        <span id="status">Connecting...</span>
    </header>

    <section>
        <div class="action-buttons">
            <button class="create-btn" onclick="openCreateModal()">+ Create New Item</button>
        </div>

        <div class="filters">
            <div class="filter-group">
                <label for="filter-name">Search Name</label>
                <input type="text" id="filter-name" class="filter-input" placeholder="Item name...">
            </div>
            <div class="filter-group">
                <label for="filter-description">Search Description</label>
                <input type="text" id="filter-description" class="filter-input" placeholder="Description...">
            </div>
            <div class="filter-group">
                <label for="filter-min-price">Min Price</label>
                <input type="number" id="filter-min-price" class="filter-input" placeholder="$0" min="0">
            </div>
            <div class="filter-group">
                <label for="filter-max-price">Max Price</label>
                <input type="number" id="filter-max-price" class="filter-input" placeholder="Any" min="0">
            </div>
            <button class="filter-btn" onclick="clearFilters()">Clear Filters</button>
        </div>

        <div class="results-info">
            Showing <span id="visible-count">0</span> of <span id="total-count">0</span> items
        </div>

        <div class="table-wrapper">
            <table id="items-table" class="pure-table pure-table-horizontal">
                <thead>
                <tr>
                    <th data-sort="name">Name <span class="sort-arrow"></span></th>
                    <th data-sort="description">Description <span class="sort-arrow"></span></th>
                    <th data-sort="price">Price <span class="sort-arrow"></span></th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody id="items-body">
                {{#items}}
                    <tr data-id="{{id}}">
                        <td>{{name}}</td>
                        <td>{{description}}</td>
                        <td>${{price}}</td>
                        <td>
                            <div class="item-actions">
                                <button class="pure-button pure-button-primary" onclick="openOffers({{id}})">View Offers</button>
                                <button class="action-btn-small edit" onclick="openEditModal({{id}})">Edit</button>
                                <button class="action-btn-small delete" onclick="deleteItem({{id}})">Delete</button>
                            </div>
                        </td>
                    </tr>
                {{/items}}

                {{^items}}
                    <tr id="no-items"><td colspan="4" class="no-items">No items found.</td></tr>
                {{/items}}
                </tbody>
            </table>
        </div>
    </section>
</div>

<!-- Modal for Create/Edit Item -->
<div id="itemModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle">Create New Item</h2>
        </div>
        <form id="itemForm">
            <input type="hidden" id="itemId">
            <div class="form-group">
                <label for="itemName">Name *</label>
                <input type="text" id="itemName" class="form-input" placeholder="Enter item name" required>
            </div>
            <div class="form-group">
                <label for="itemDescription">Description</label>
                <textarea id="itemDescription" class="form-input" placeholder="Enter item description"></textarea>
            </div>
            <div class="form-group">
                <label for="itemPrice">Price *</label>
                <input type="number" id="itemPrice" class="form-input" placeholder="0.00" min="0" step="0.01" required>
            </div>
            <div class="modal-actions">
                <button type="button" class="modal-btn cancel" onclick="closeModal()">Cancel</button>
                <button type="submit" class="modal-btn primary">Save Item</button>
            </div>
        </form>
    </div>
</div>

<script>
    const ws = new WebSocket("ws://" + window.location.host + "/ws");
    const tbody = document.getElementById("items-body");
    const statusEl = document.getElementById("status");

    // Filter elements
    const filterName = document.getElementById("filter-name");
    const filterDescription = document.getElementById("filter-description");
    const filterMinPrice = document.getElementById("filter-min-price");
    const filterMaxPrice = document.getElementById("filter-max-price");

    // Modal elements
    const modal = document.getElementById("itemModal");
    const modalTitle = document.getElementById("modalTitle");
    const itemForm = document.getElementById("itemForm");
    const itemIdInput = document.getElementById("itemId");
    const itemNameInput = document.getElementById("itemName");
    const itemDescriptionInput = document.getElementById("itemDescription");
    const itemPriceInput = document.getElementById("itemPrice");


    // Close modal when clicking outside
    modal.addEventListener("click", (e) => {
        if (e.target === modal) closeModal();
    });

    // Handle form submission
    itemForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        const itemId = itemIdInput.value;
        const name = itemNameInput.value.trim();
        const description = itemDescriptionInput.value.trim();
        const price = parseFloat(itemPriceInput.value);

        if (!name || isNaN(price)) {
            alert("Please fill in all required fields");
            return;
        }

        const itemData = {name, description, price};
        const method = itemId ? "PUT" : "POST";
        const url = itemId ? `/items/${itemId}` : "/items";

        try {
            const response = await fetch('/api/v1/' + url, {
                method,
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(itemData)
            });

            if (response.ok) {
                closeModal();
            } else {
                const error = await response.text();
                alert(`Error: ${error}`);
            }
        } catch (error) {
            alert(`Error: ${error.message}`);
        }
    });

    async function deleteItem(itemId) {
        if (!confirm("Are you sure you want to delete this item?")) return;

        try {
            const response = await fetch(`/api/v1/items/${itemId}`, {method: "DELETE"});
            if (!response.ok) {
                const error = await response.text();
                alert(`Error: ${error}`);
            }
        } catch (error) {
            alert(`Error: ${error.message}`);
        }
    }

    // Handle back button navigation
    window.addEventListener('pageshow', function(event) {
        if (event.persisted || performance.getEntriesByType("navigation")[0].type === "back_forward") {
            // Page was loaded from cache (back button used)
            // Re-initialize data attributes for existing rows
            const existingRows = tbody.querySelectorAll("tr[data-id]");
            existingRows.forEach(row => {
                const name = row.children[0].textContent;
                const description = row.children[1].textContent;
                const priceText = row.children[2].textContent;
                const price = parseFloat(priceText.replace('$', ''));

                row.dataset.name = name.toLowerCase();
                row.dataset.description = description.toLowerCase();
                row.dataset.price = price;
            });

            // Update counts and apply any active filters
            updateCounts();
            applyFilters();
        }
    });

    // Add event listeners for real-time filtering
    [filterName, filterDescription, filterMinPrice, filterMaxPrice].forEach(input => {
        input.addEventListener("input", applyFilters);
    });

    ws.onopen = () => {
        statusEl.textContent = "Connected";
        statusEl.classList.add("connected");
        const ids = [...document.querySelectorAll('tr[data-id]')].map(el => el.dataset.id);
        ws.send(JSON.stringify({action: "subscribe", itemIds: ids}));
        ws.send(JSON.stringify({action: "subscribeAll"}));
        updateCounts();
    };

    ws.onmessage = event => {
        const msg = JSON.parse(event.data);
        const {eventType, data} = msg;

        if (eventType === "ITEM_CREATED") addItem(data);
        else if (eventType === "ITEM_UPDATED") updateItem(data);
        else if (eventType === "ITEM_DELETED") removeItem(data);
    };

    ws.onclose = () => {
        statusEl.textContent = "Disconnected";
        statusEl.classList.remove("connected");
    };

    function openCreateModal() {
        modalTitle.textContent = "Create New Item";
        itemForm.reset();
        itemIdInput.value = "";
        modal.classList.add("active");
    }

    function openEditModal(itemId) {
        const row = document.querySelector(`[data-id="${itemId}"]`);
        if (!row) return;

        modalTitle.textContent = "Edit Item";
        itemIdInput.value = itemId;
        itemNameInput.value = row.children[0].textContent;
        itemDescriptionInput.value = row.children[1].textContent;
        itemPriceInput.value = row.children[2].textContent.replace('$', '');
        modal.classList.add("active");
    }

    function closeModal() {
        modal.classList.remove("active");
        itemForm.reset();
    }


    function addItem(item) {
        // Remove "no items" row if present
        const noItemsRow = document.getElementById("no-items");
        if (noItemsRow) noItemsRow.remove();

        // Create a new table row
        const row = document.createElement("tr");
        row.dataset.id = item.id;
        row.dataset.name = item.name.toLowerCase();
        row.dataset.description = item.description.toLowerCase();
        row.dataset.price = item.price;

        row.innerHTML = `
        <td>${item.name}</td>
        <td>${item.description}</td>
        <td>$${item.price}</td>
        <td>
            <div class="item-actions">
                <button class="pure-button pure-button-primary" onclick="openOffers(${item.id})">View Offers</button>
                <button class="action-btn-small edit" onclick="openEditModal(${item.id})">Edit</button>
                <button class="action-btn-small delete" onclick="deleteItem(${item.id})">Delete</button>
            </div>
        </td>
    `;

        // Add to table
        tbody.appendChild(row);

        updateCounts();
        applyFilters();
    }


    function updateItem(item) {
        const tr = document.querySelector(`[data-id="${item.id}"]`);
        if (!tr) return addItem(item);
        tr.dataset.name = item.name.toLowerCase();
        tr.dataset.description = (item.description || "").toLowerCase();
        tr.dataset.price = item.price;
        tr.children[0].textContent = item.name;
        tr.children[1].textContent = item.description || "";
        tr.children[2].textContent = `${item.price}`;
        applyFilters();
    }

    function removeItem(itemId) {
        const tr = document.querySelector(`[data-id="${itemId}"]`);
        if (tr) tr.remove();
        if (!tbody.children.length) {
            tbody.innerHTML = `<tr id="no-items"><td colspan="4" class="no-items">No items found.</td></tr>`;
        }
        updateCounts();
    }

    function openOffers(itemId) {
        window.location.href = `/items/${itemId}/offers`;
    }

    function applyFilters() {
        const nameFilter = filterName.value.toLowerCase().trim();
        const descFilter = filterDescription.value.toLowerCase().trim();
        const minPrice = filterMinPrice.value ? parseFloat(filterMinPrice.value) : null;
        const maxPrice = filterMaxPrice.value ? parseFloat(filterMaxPrice.value) : null;

        const rows = tbody.querySelectorAll("tr[data-id]");
        let visibleCount = 0;

        rows.forEach(row => {
            const name = row.dataset.name || "";
            const description = row.dataset.description || "";
            const price = parseFloat(row.dataset.price);

            let visible = true;

            if (nameFilter && !name.includes(nameFilter)) visible = false;
            if (descFilter && !description.includes(descFilter)) visible = false;
            if (minPrice !== null && price < minPrice) visible = false;
            if (maxPrice !== null && price > maxPrice) visible = false;

            row.style.display = visible ? "" : "none";
            if (visible) visibleCount++;
        });

        updateCounts();
    }

    function clearFilters() {
        filterName.value = "";
        filterDescription.value = "";
        filterMinPrice.value = "";
        filterMaxPrice.value = "";
        applyFilters();
    }

    function updateCounts() {
        const allRows = tbody.querySelectorAll("tr[data-id]");
        const visibleRows = tbody.querySelectorAll("tr[data-id]:not([style*='display: none'])");
        document.getElementById("total-count").textContent = allRows.length;
        document.getElementById("visible-count").textContent = visibleRows.length;
    }

    let sortDirection = 1;
    let currentSortKey = null;

    document.querySelectorAll("th[data-sort]").forEach(th => {
        th.addEventListener("click", () => {
            const key = th.dataset.sort;
            if (currentSortKey === key) sortDirection *= -1;
            else {
                currentSortKey = key;
                sortDirection = 1;
            }

            document.querySelectorAll(".sort-arrow").forEach(a => a.textContent = "");
            th.querySelector(".sort-arrow").textContent = sortDirection === 1 ? "▲" : "▼";

            const rows = [...tbody.querySelectorAll("tr[data-id]")];
            rows.sort((a, b) => {
                const aVal = a.querySelector(`td:nth-child(${th.cellIndex + 1})`).textContent.trim().toLowerCase();
                const bVal = b.querySelector(`td:nth-child(${th.cellIndex + 1})`).textContent.trim().toLowerCase();
                return sortDirection * aVal.localeCompare(bVal, undefined, {numeric: true});
            });
            rows.forEach(r => tbody.append(r));
        });
    });

    // Handle back button navigation
    window.addEventListener('pageshow', function(event) {
        if (event.persisted || performance.getEntriesByType("navigation")[0].type === "back_forward") {
            // Page was loaded from cache (back button used)
            // Re-initialize data attributes for existing rows
            const existingRows = tbody.querySelectorAll("tr[data-id]");
            existingRows.forEach(row => {
                const name = row.children[0].textContent;
                const description = row.children[1].textContent;
                const priceText = row.children[2].textContent;
                const price = parseFloat(priceText.replace('$', ''));

                row.dataset.name = name.toLowerCase();
                row.dataset.description = description.toLowerCase();
                row.dataset.price = price;
            });

            // Update counts and apply any active filters
            updateCounts();
            applyFilters();
        }
    });
</script>
</body>
</html>